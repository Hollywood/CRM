{
  "_": {
    "postman_id": "a2a1ec22-4482-40cb-a3cc-689cea170705"
  },
  "item": [
    {
      "id": "833b743e-6c74-4f5c-9cdb-3f403914a203",
      "name": "db-init",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "b688e145-f695-4358-a893-1cfbc0d12299",
          "name": "Creates and populates the database with dummy data",
          "request": {
            "name": "Creates and populates the database with dummy data",
            "description": {
              "content": "Creates and populates the database with dummy data",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "createdb"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "4f0c0a79-5f1d-4dc1-a00b-d5e07aa9ee5f",
              "name": "Creates and populates the database with dummy data",
              "originalRequest": {
                "url": {
                  "path": [
                    "createdb"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"ad\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9c69a2fa-7a77-4040-822d-86b36748b2d6",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/createdb - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/createdb - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/createdb - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/createdb - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "867ad9ec-41c1-4fdd-be9e-2d316f868685",
      "name": "home",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "fecad000-9f34-4aaf-bd94-353c9d74cf6e",
          "name": "VAmPI home",
          "request": {
            "name": "VAmPI home",
            "description": {
              "content": "VAmPI is a vulnerable on purpose API. It was created in order to evaluate the efficiency of third party tools in identifying vulnerabilities in APIs but it can also be used in learning/teaching purposes.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "322e8746-c350-4223-acf5-4bf88d7b1d4c",
              "name": "Home - Help",
              "originalRequest": {
                "url": {
                  "path": [
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"ut adipisicing\",\n  \"Help\": \"consequat aliquip\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46bc980d-3ca3-42bd-b3ca-62e4c297a4e4",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/ - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/ - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/ - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"},\"Help\":{\"type\":\"string\"}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/ - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "id": "86af848a-20b8-4f7a-87bf-58559b70591f",
      "name": "users",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "9db16fea-113d-4b14-be42-a7cd9217085f",
          "name": "Retrieves all users",
          "request": {
            "name": "Retrieves all users",
            "description": {
              "content": "Displays all users with basic information",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                "v1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f6d79140-fff6-4f0a-a21e-a206ca967f98",
              "name": "See basic info about all users",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"email\": \"ipsum\",\n    \"username\": \"officia in proiden\"\n  },\n  {\n    \"email\": \"quis id et\",\n    \"username\": \"officia id quis velit\"\n  }\n]",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2f3623a9-33c0-43d4-be5c-6083a59bf3a5",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/users/v1 - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/users/v1 - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/users/v1 - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"email\":{\"type\":\"string\"},\"username\":{\"type\":\"string\"}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/users/v1 - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "36a44d8a-b9da-4329-814d-7bb7b39009ab",
          "name": "Retrieves all details for all users",
          "request": {
            "name": "Retrieves all details for all users",
            "description": {
              "content": "Displays all details for all users",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                "v1",
                "_debug"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b56f8794-8725-47e4-a5f6-f035f7003aeb",
              "name": "See all details of the users",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    "_debug"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"admin\": true,\n    \"email\": \"ipsum Lorem labore c\",\n    \"password\": \"minim quis\",\n    \"username\": \"fugiat officia\"\n  },\n  {\n    \"admin\": true,\n    \"email\": \"non\",\n    \"password\": \"veniam deserunt dolor eu\",\n    \"username\": \"mollit\"\n  }\n]",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b7f643f-8fe1-4f5c-a8e6-f8979ba00306",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/users/v1/_debug - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/users/v1/_debug - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/users/v1/_debug - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"admin\":{\"type\":\"boolean\"},\"email\":{\"type\":\"string\"},\"password\":{\"type\":\"string\"},\"username\":{\"type\":\"string\"}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/users/v1/_debug - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "616b2743-c8b9-4f61-9771-2cb027003bb3",
          "name": "Register new user",
          "request": {
            "name": "Register new user",
            "description": {
              "content": "Register new user",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                "v1",
                "register"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"dolore nulla in eu\",\n  \"password\": \"incididunt aute\",\n  \"email\": \"cillum ut pariatur\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "11f791dc-9ded-4a40-88e4-07b13c6a9da3",
              "name": "Sucessfully created user",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"dolore nulla in eu\",\n  \"password\": \"incididunt aute\",\n  \"email\": \"cillum ut pariatur\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"veniam irure\",\n  \"status\": \"success\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "73e7ec2d-2fdb-4552-9dfc-5b13f6d3d6f3",
              "name": "Invalid request",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    "register"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"dolore nulla in eu\",\n  \"password\": \"incididunt aute\",\n  \"email\": \"cillum ut pariatur\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b74bab8c-92c1-406d-aa7c-998db4f5da40",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/users/v1/register - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/users/v1/register - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/users/v1/register - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"},\"status\":{\"type\":\"string\",\"enum\":[\"success\",\"fail\"]}}}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/users/v1/register - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "fd416b1a-6e2a-498c-b987-6fa2401e35b5",
          "name": "Login to VAmPI",
          "request": {
            "name": "Login to VAmPI",
            "description": {
              "content": "Login to VAmPI",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                "v1",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"nostrud mollit cillum\",\n  \"password\": \"pariatur\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "c3a1dff7-2052-4b24-b0ff-bd58da623a0a",
              "name": "Sucessfully logged in user",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"nostrud mollit cillum\",\n  \"password\": \"pariatur\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"auth_token\": \"ad pariatur est qui\",\n  \"message\": \"dolore\",\n  \"status\": \"fail\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "611ccce2-7148-44de-b675-32f889034035",
              "name": "Invalid request",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"nostrud mollit cillum\",\n  \"password\": \"pariatur\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"status\": \"fail\",\n  \"message\": \"sed irure\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7caaf0bc-0eab-4575-8b12-05f9abc0a1c5",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/users/v1/login - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/users/v1/login - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/users/v1/login - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"auth_token\":{\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"status\":{\"type\":\"string\",\"enum\":[\"success\",\"fail\"]}}}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/users/v1/login - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "87f3e807-e05d-4e40-bae4-5bde7e64d6b7",
          "name": "Retrieves user by username",
          "request": {
            "name": "Retrieves user by username",
            "description": {
              "content": "Displays user by username",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                "v1",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) retrieve username data",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "ad voluptate id laboris",
                  "key": "username"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3d6a1d84-0461-4832-bb24-851d4d42f9a5",
              "name": "Successfully display user info",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) retrieve username data",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"username\": \"eu ut\",\n    \"email\": \"in cillum culpa\"\n  },\n  {\n    \"username\": \"id exercitation est aliqua\",\n    \"email\": \"occaecat\"\n  }\n]",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0c9ffd0c-a95a-4689-af3b-899149fd533c",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) retrieve username data",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"status\": \"fail\",\n  \"message\": \"sed irure\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "779f3fc6-4c62-46d3-b286-3da5a56e82ac",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/users/v1/:username - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/users/v1/:username - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/users/v1/:username - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"username\":{\"type\":\"string\"},\"email\":{\"type\":\"string\"}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/users/v1/:username - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "6f94ea7d-e44e-4952-98cb-5412ad8b771d",
          "name": "Deletes user by username (Only Admins)",
          "request": {
            "name": "Deletes user by username (Only Admins)",
            "description": {
              "content": "Deletes user by username (Only Admins)",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                "v1",
                ":username"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) Delete username",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "ad voluptate id laboris",
                  "key": "username"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "73d1c178-f770-4de4-93c3-60246a7ab60c",
              "name": "Sucessfully deleted user",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Delete username",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"veniam irure\",\n  \"status\": \"success\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f4246fd1-2d47-4a81-b6f6-5f4fd6869ced",
              "name": "User not authorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Delete username",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"status\": \"fail\",\n  \"message\": \"sed irure\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "c885ecd5-1459-46ed-99b3-5a523e9438c6",
              "name": "User not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) Delete username",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "DELETE",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a50b4609-fa6b-461b-ba80-2399aa6c2e58",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[DELETE]::/users/v1/:username - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[DELETE]::/users/v1/:username - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[DELETE]::/users/v1/:username - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"},\"status\":{\"type\":\"string\",\"enum\":[\"success\",\"fail\"]}}}\n\n// Validate if response matches JSON schema \npm.test(\"[DELETE]::/users/v1/:username - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "1140d4e9-124c-4b08-8129-65b4e996e028",
          "name": "Update users email",
          "request": {
            "name": "Update users email",
            "description": {
              "content": "Update a single users email",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                "v1",
                ":username",
                "email"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) username to update email",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "ad voluptate id laboris",
                  "key": "username"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"incididunt\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "ee658d25-0074-430e-a375-243517360b04",
              "name": "Sucessfully updated user email",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username",
                    "email"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) username to update email",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"incididunt\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "716f2451-184f-4566-b6c3-939d6e7c357d",
              "name": "Invalid request",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username",
                    "email"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) username to update email",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"incididunt\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b705f424-e4a8-4364-b1d7-ea069b329a6f",
              "name": "User not authorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username",
                    "email"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) username to update email",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"incididunt\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"status\": \"fail\",\n  \"message\": \"sed irure\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5d270103-aa9d-44ac-ade4-991788a9a3a5",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/users/v1/:username/email - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response has empty Body \npm.test(\"[PUT]::/users/v1/:username/email - Response has empty Body\", function () {\n    pm.response.to.not.be.withBody;\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "58152ac8-aafd-4693-8566-d496a6371d9a",
          "name": "Update users password",
          "request": {
            "name": "Update users password",
            "description": {
              "content": "Update users password",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users",
                "v1",
                ":username",
                "password"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) username to update password",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "ad voluptate id laboris",
                  "key": "username"
                }
              ]
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"dolor in\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "709ec2d4-df6f-4551-9e3a-a363f901ddce",
              "name": "Sucessfully updated users password",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username",
                    "password"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) username to update password",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"dolor in\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "No Content",
              "code": 204,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "12cedd12-45df-4dc6-b17d-478a8ef4b356",
              "name": "Invalid request",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username",
                    "password"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) username to update password",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"dolor in\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "ddcb70cb-0771-4696-bb99-438fcf818547",
              "name": "User not authorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "users",
                    "v1",
                    ":username",
                    "password"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) username to update password",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "username"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"password\": \"dolor in\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"status\": \"fail\",\n  \"message\": \"sed irure\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "94223098-0b8c-4fe3-a36d-80f4ca11c2b2",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[PUT]::/users/v1/:username/password - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response has empty Body \npm.test(\"[PUT]::/users/v1/:username/password - Response has empty Body\", function () {\n    pm.response.to.not.be.withBody;\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "ffdca1dd-e81e-4878-a98c-a15ab7c82323",
      "name": "books",
      "description": {
        "content": "",
        "type": "text/plain"
      },
      "item": [
        {
          "id": "356fa8fe-2acc-49cb-bd95-091c367c3dd0",
          "name": "Retrieves all books",
          "request": {
            "name": "Retrieves all books",
            "description": {
              "content": "Retrieves all books",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "books",
                "v1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "dfcc123a-f54b-4918-8880-92a3a163aa56",
              "name": "See all books",
              "originalRequest": {
                "url": {
                  "path": [
                    "books",
                    "v1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"Books\": [\n    {\n      \"book_title\": \"velit dolor adipisicing pariatur\",\n      \"user\": \"consectetur\"\n    },\n    {\n      \"book_title\": \"velit ut enim\",\n      \"user\": \"eu\"\n    }\n  ]\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3133600-247a-471b-989b-8327fc9f9ac8",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/books/v1 - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/books/v1 - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/books/v1 - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"Books\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"book_title\":{\"type\":\"string\"},\"user\":{\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/books/v1 - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        },
        {
          "id": "0ea1c8f5-3f87-4c4e-877c-29c351909780",
          "name": "Add new book",
          "request": {
            "name": "Add new book",
            "description": {
              "content": "Add new book",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "books",
                "v1"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"book_title\": \"minim\",\n  \"secret\": \"anim in\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "a4069669-8bcf-431d-b24a-dec55c37a4e1",
              "name": "Sucessfully added a book",
              "originalRequest": {
                "url": {
                  "path": [
                    "books",
                    "v1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"book_title\": \"minim\",\n  \"secret\": \"anim in\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"message\": \"veniam irure\",\n  \"status\": \"success\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "text"
              },
              "id": "2a98cdbf-4f34-4d9a-84ca-9d6963cd61c0",
              "name": "Invalid request",
              "originalRequest": {
                "url": {
                  "path": [
                    "books",
                    "v1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"book_title\": \"minim\",\n  \"secret\": \"anim in\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "0e09ffaf-53cb-4140-824e-7b1abcd7c1b1",
              "name": "User not authorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "books",
                    "v1"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"book_title\": \"minim\",\n  \"secret\": \"anim in\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"status\": \"fail\",\n  \"message\": \"sed irure\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3fd3b779-03a8-4634-98fa-2bdd5410ffa9",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[POST]::/books/v1 - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[POST]::/books/v1 - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[POST]::/books/v1 - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"},\"status\":{\"type\":\"string\",\"enum\":[\"success\",\"fail\"]}}}\n\n// Validate if response matches JSON schema \npm.test(\"[POST]::/books/v1 - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2903918e-b13c-40d6-9c5c-8f564bff0246",
          "name": "Retrieves book by title along with secret",
          "request": {
            "name": "Retrieves book by title along with secret",
            "description": {
              "content": "Retrieves book by title along with secret. Only the owner may retrieve it",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "books",
                "v1",
                ":book_title"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "description": {
                    "content": "(Required) retrieve book data",
                    "type": "text/plain"
                  },
                  "type": "any",
                  "value": "ad voluptate id laboris",
                  "key": "book_title"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "f9229949-fc0d-4d8e-9ce6-e56c1bb6a7dc",
              "name": "Successfully retrieve book info",
              "originalRequest": {
                "url": {
                  "path": [
                    "books",
                    "v1",
                    ":book_title"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) retrieve book data",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "book_title"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"book_title\": \"dolor elit Duis et\",\n    \"owner\": \"c\",\n    \"secret\": \"aute\"\n  },\n  {\n    \"book_title\": \"amet consequat ut\",\n    \"owner\": \"ex dolor mollit occaecat adipisicing\",\n    \"secret\": \"ipsum Duis fugiat eiusmod\"\n  }\n]",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "b5246047-abba-4d5c-b288-47ac93a0c724",
              "name": "User not authorized",
              "originalRequest": {
                "url": {
                  "path": [
                    "books",
                    "v1",
                    ":book_title"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) retrieve book data",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "book_title"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"status\": \"fail\",\n  \"message\": \"sed irure\"\n}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "7bac117a-bc06-43d6-833c-e647ec1790c3",
              "name": "Book not found",
              "originalRequest": {
                "url": {
                  "path": [
                    "books",
                    "v1",
                    ":book_title"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "description": {
                        "content": "(Required) retrieve book data",
                        "type": "text/plain"
                      },
                      "type": "any",
                      "value": "ad voluptate id laboris",
                      "key": "book_title"
                    }
                  ]
                },
                "method": "GET",
                "body": {}
              },
              "status": "Not Found",
              "code": 404,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"status\": \"fail\",\n  \"message\": \"sed irure\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7690c84f-b6f0-4b84-b22a-26de1ad7d47e",
                "type": "text/javascript",
                "exec": [
                  "// Validate status 2xx \npm.test(\"[GET]::/books/v1/:book_title - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
                  "// Validate if response header has matching content-type\npm.test(\"[GET]::/books/v1/:book_title - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
                  "// Validate if response has JSON Body \npm.test(\"[GET]::/books/v1/:book_title - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
                  "// Response Validation\nconst schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"book_title\":{\"type\":\"string\"},\"owner\":{\"type\":\"string\"},\"secret\":{\"type\":\"string\"}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/books/v1/:book_title - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "http://localhost:5000",
      "key": "baseUrl"
    }
  ],
  "info": {
    "_postman_id": "a2a1ec22-4482-40cb-a3cc-689cea170705",
    "name": "VAmPI",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "OpenAPI v3 specs for VAmPI",
      "type": "text/plain"
    }
  }
}
